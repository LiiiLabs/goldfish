<TMU|<tuple|1.0.5|1.2.9.8>>

<style|<tuple|generic|chinese|goldfish|literate|reduced-margins|python>>

<\body>
  <\hide-preamble>
    <assign|r7rs|<flag|R7RS|dark cyan>>

    <assign|srfi|<flag|SRFI|dark red>>

    <assign|font|math=Latin Modern Math,cjk=Noto CJK SC,CMU>

    <assign|typehint|<macro|body|<goldfish-lang|<arg|body>>>>
  </hide-preamble>

  <chapter|(liii http)>

  <section|许可证>

  <\goldfish-chunk|http/liii/http.scm|false|true>
    ;

    ; Copyright (C) 2024 The Goldfish Scheme Authors

    ;

    ; Licensed under the Apache License, Version 2.0 (the "License");

    ; you may not use this file except in compliance with the License.

    ; You may obtain a copy of the License at

    ;

    ; http://www.apache.org/licenses/LICENSE-2.0

    ;

    ; Unless required by applicable law or agreed to in writing, software

    ; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

    ; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

    ; License for the specific language governing permissions and limitations

    ; under the License.

    ;

    \;
  </goldfish-chunk>

  <\cpp-chunk|http/src/http.cpp|false|true>
    //

    // Copyright (C) 2024 The Goldfish Scheme Authors

    //

    // Licensed under the Apache License, Version 2.0 (the "License");

    // you may not use this file except in compliance with the License.

    // You may obtain a copy of the License at

    //

    // http://www.apache.org/licenses/LICENSE-2.0

    //

    // Unless required by applicable law or agreed to in writing, software

    // distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

    // WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

    // License for the specific language governing permissions and limitations

    // under the License.

    //

    \;
  </cpp-chunk>

  <section|接口>

  <\scm-chunk|http/liii/http.scm|true|true>
    (define-library (liii http)

    (import (liii hash-table)

    \ \ \ \ \ \ \ \ (liii alist))

    (export http-head http-get http-post http-ok?)

    (begin

    \;
  </scm-chunk>

  <paragraph|HTTP响应对象>

  <\description>
    <item*|status_code>HTTP状态码

    <item*|url>最终有效的请求URL

    <item*|elapsed>请求的总时间，以秒为单位

    <item*|text>HTTP响应的正文

    <item*|reason>HTTP响应出错的原因

    <item*|headers>HTTP响应头
  </description>

  <section|Goldfish Scheme中的response设计>

  <\session|goldfish|default>
    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (import (liii hash-table))
    <|unfolded-io>
      <goldfish-result|(rootlet)>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define r (make-hash-table))
    <|unfolded-io>
      <goldfish-result|(hash-table)>
    </unfolded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      (hash-table-set! r 'ok #t)
    </input>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (r 'ok)
    <|unfolded-io>
      <goldfish-result|#t>
    </unfolded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      (hash-table-set! r 'status-code 200)
    </input>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (r 'status-code)
    <|unfolded-io>
      <goldfish-result|200>
    </unfolded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      (hash-table-set! r 'headers (make-hash-table))
    </input>

    <\input>
      \<gtr\>\ 
    <|input>
      (hash-table-set! (r 'headers) "Content-Length" "9593")
    </input>

    <\folded-io>
      \<gtr\>\ 
    <|folded-io>
      ((r 'headers) "Content-Length")
    <|folded-io>
      <goldfish-result|"9593">
    </folded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      \;
    </input>
  </session>

  <section|示例代码>

  这是一个使用Goldfish访问硅基流动的示例代码，用户可以在家目录的<shell|.silicon_cloud>文件中存储硅基流动的API密钥，也可以将明文填入到下面的代码中。使用如下命令行可以运行这个示例代码：

  <\shell-code>
    xmake config --http=y --yes -vD

    xmake b http

    bin/http -l http/tests/chat_demo.scm
  </shell-code>

  <\goldfish-chunk|http/tests/chat_demo.scm|false|true>
    (set! *load-path* (cons "http" *load-path*))

    (set! *load-path* (cons "json" *load-path*))

    \;

    (import (liii http)

    \ \ \ \ \ \ \ \ (liii json)

    \ \ \ \ \ \ \ \ (liii list)

    \ \ \ \ \ \ \ \ (liii os)

    \ \ \ \ \ \ \ \ (liii string))

    \;

    ;; 定义一个函数来读取文件内容并移除行末的回车符

    (define (read-and-clean-file file-path)

    \ \ (call-with-input-file file-path

    \ \ \ \ (lambda (port)

    \ \ \ \ \ \ (let loop ((line (read-line port))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (content ""))

    \ \ \ \ \ \ \ \ (if (eof-object? line)

    \ \ \ \ \ \ \ \ \ \ \ \ (string-trim-right content #\\newline) ; 移除行末的回车符

    \ \ \ \ \ \ \ \ \ \ \ \ (loop (read-line port) (string-append content line)))))))

    \;

    (define (load-silicon-cloud-api-key)

    \ \ (let* ((home (if (os-windows?)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (getenv "USERPROFILE") ; Windows 使用 USERPROFILE

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (getenv "HOME"))) \ \ \ \ \ ; Unix/Linux 使用 HOME

    \ \ \ \ \ \ \ \ \ (file-path (string-append home (string (os-sep)) ".silicon_cloud")))

    \ \ \ \ (if (file-exists? file-path) \ \ \ \ \ \ \ \ \ ; 直接判断文件是否存在

    \ \ \ \ \ \ \ \ (read-and-clean-file file-path)

    \ \ \ \ \ \ \ \ "请填入硅基流动的API密钥")))

    \;
  </goldfish-chunk>

  向硅基流动发起HTTP Post请求的核心代码，这里默认使用DeepSeek-V2.5这个付费模型，因为实测该模型的效果比较好，价格比较低。

  <\goldfish-chunk|http/tests/chat_demo.scm|true|true>
    (define headers

    \ \ `(

    \ \ \ \ \ ("Authorization" . ,(string-append "Bearer " (load-silicon-cloud-api-key)))

    \ \ \ \ \ ("Content-Type" . "application/json")

    \ \ \ )

    )

    \;

    (define payload

    \ \ `(

    \ \ \ \ ("model" . "deepseek-ai/DeepSeek-V2.5")

    \ \ \ \ ("messages" . #())

    \ \ \ \ ("max_tokens" . 512)

    \ \ \ )

    )

    \;

    (define (chat payload)

    \ \ (let* ((r (http-post "https://api.siliconflow.cn/v1/chat/completions"

    \ \ \ \ \ \ \ \ \ \ \ \ :data (json-\<gtr\>string payload)

    \ \ \ \ \ \ \ \ \ \ \ \ :headers headers)))

    \ \ \ \ (if (http-ok? r)

    \ \ \ \ \ \ \ \ (r 'text)

    \ \ \ \ \ \ \ \ (r 'status-code))))

    \;
  </goldfish-chunk>

  构建文本对话的单个消息体，其中role只能是"user", "assistant"和"system"，<todo|这里在构造的时候，暂时不做校验>。

  <\goldfish-chunk|http/tests/chat_demo.scm|true|true>
    (define (message role content)

    \ \ `(("role" . ,role) ("content" . ,content)))

    \;
  </goldfish-chunk>

  将消息体添加到JSON对象q的尾部。q对象的结构就是上面定义的payload函数中的JSON，这里是在更改messages字段的值。

  <\goldfish-chunk|http/tests/chat_demo.scm|true|true>
    (define (append-message q msg)

    \ \ (json-set q "messages" (lambda (v) (vector-append v (vector msg)))))

    \;
  </goldfish-chunk>

  按照提供的问题列表，和大模型对话，打印每次对话（在前面加上<verbatim|Q: >和<verbatim|A: >），最后输出一下token的用量。

  <\goldfish-chunk|http/tests/chat_demo.scm|true|false>
    (define questions

    \ \ #("唐宋八大家是哪八位（简短回答）"

    \ \ \ \ "请按照顺序返回上一个回答中的第五位"

    \ \ \ \ "用双引号引用上一个问题的回答（包含标点符号），并告诉我一共多少个汉字？"

    \ \ \ \ "介绍他的生平和作品（简短回答）"))

    \;

    (let loop ((i 0) (payload payload) (tokens 0))

    \ \ (if (\<less\> i (length questions))

    \ \ \ \ \ \ (let* ((q (append-message payload (message "user" (questions i))))

    \ \ \ \ \ \ \ \ \ \ \ \ \ (r (chat q))

    \ \ \ \ \ \ \ \ \ \ \ \ \ (j (string-\<gtr\>json r))

    \ \ \ \ \ \ \ \ \ \ \ \ \ (a (json-ref* j "choices" 0 "message" "content")))

    \ \ \ \ \ \ \ \ \ \ (display* "payload: " (json-\<gtr\>string q))

    \ \ \ \ \ \ \ \ \ \ (newline)

    \ \ \ \ \ \ \ \ \ \ (newline)

    \ \ \ \ \ \ \ \ \ \ (display* "Q: " (questions i) "\\n")

    \ \ \ \ \ \ \ \ \ \ (display* "A: " a "\\n")

    \ \ \ \ \ \ \ \ \ \ (newline)

    \ \ \ \ \ \ \ \ \ \ (loop (+ i 1)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (append-message q (message "assistant" a))

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ (+ tokens (json-ref* j "usage" "total_tokens"))))

    \ \ \ \ \ \ (display* "Total tokens: " tokens)))

    \;
  </goldfish-chunk>

  <section|测试>

  如何测试：

  <\shell-code>
    xmake config --http=y --yes -vD

    xmake b http

    bin/http http/tests/http_test.scm
  </shell-code>

  <\goldfish-chunk|http/tests/http_test.scm|false|true>
    (set! *load-path* (cons "http" *load-path*))

    (set! *load-path* (cons "json" *load-path*))

    \;

    (import (liii check)

    \ \ \ \ \ \ \ \ (liii http)

    \ \ \ \ \ \ \ \ (liii string)

    \ \ \ \ \ \ \ \ (liii json))

    \;
  </goldfish-chunk>

  \;

  <section|实现>

  <subsection|C++部分>

  <paragraph|头文件>

  <\cpp-chunk|http/src/http.cpp|true|true>
    #include "goldfish.hpp"

    #include "s7.h"

    #include \<less\>string\<gtr\>

    #include \<less\>iostream\<gtr\>

    #include \<less\>cpr/cpr.h\<gtr\>

    \;

    using namespace goldfish;

    using namespace std;

    \;
  </cpp-chunk>

  <paragraph|repsonse2hashtable>

  <\cpp-chunk|http/src/http.cpp|true|true>
    static s7_pointer

    response2hashtable (s7_scheme* sc, cpr::Response r) {

    \ \ s7_pointer ht= s7_make_hash_table (sc, 8);

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol (sc, "status-code"), s7_make_integer (sc, r.status_code));

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol (sc, "url"), s7_make_string (sc, r.url.c_str()));

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol(sc, "elapsed"), s7_make_real (sc, r.elapsed));

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol (sc, "text"), s7_make_string (sc, r.text.c_str ()));

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol (sc, "reason"), s7_make_string (sc, r.reason.c_str ()));

    \ \ s7_pointer headers= s7_make_hash_table(sc, 8);

    \ \ for (const auto &header : r.header) {

    \ \ \ \ const auto key= header.first.c_str ();

    \ \ \ \ const auto value= header.second.c_str ();

    \ \ \ \ s7_hash_table_set (sc, headers, s7_make_string (sc, key), s7_make_string (sc, value));

    \ \ }

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol(sc, "headers"), headers);

    \;

    \ \ return ht;

    }

    \;
  </cpp-chunk>

  <paragraph|to_cpr_parameters>

  <\cpp-chunk|http/src/http.cpp|true|true>
    inline cpr::Parameters

    to_cpr_parameters (s7_scheme* sc, s7_pointer args) {

    \ \ cpr::Parameters params= cpr::Parameters{};

    \ \ if (s7_is_list(sc, args)) {

    \ \ \ \ s7_pointer iter= args;

    \ \ \ \ while (!s7_is_null (sc, iter)) {

    \ \ \ \ \ \ s7_pointer pair= s7_car (iter);

    \ \ \ \ \ \ if (s7_is_pair (pair)) {

    \ \ \ \ \ \ \ \ const char* key= s7_string (s7_car (pair));

    \ \ \ \ \ \ \ \ const char* value= s7_string (s7_cdr (pair));

    \ \ \ \ \ \ \ \ params.Add (cpr::Parameter (string (key), string (value)));

    \ \ \ \ \ \ }

    \ \ \ \ \ \ iter= s7_cdr (iter);

    \ \ \ \ }

    \ \ }

    \ \ return params;

    }

    \;
  </cpp-chunk>

  <paragraph|to_cpr_headers>

  <\cpp-chunk|http/src/http.cpp|true|true>
    inline cpr::Header

    to_cpr_headers (s7_scheme* sc, s7_pointer args) {

    \ \ cpr::Header headers= cpr::Header{};

    \ \ if (s7_is_list(sc, args)) {

    \ \ \ \ s7_pointer iter= args;

    \ \ \ \ while (!s7_is_null (sc, iter)) {

    \ \ \ \ \ \ s7_pointer pair= s7_car (iter);

    \ \ \ \ \ \ if (s7_is_pair (pair)) {

    \ \ \ \ \ \ \ \ const char* key= s7_string (s7_car (pair));

    \ \ \ \ \ \ \ \ const char* value= s7_string (s7_cdr (pair));

    \ \ \ \ \ \ \ \ headers.insert (std::make_pair (key, value));

    \ \ \ \ \ \ }

    \ \ \ \ \ \ iter= s7_cdr (iter);

    \ \ \ \ }

    \ \ }

    \ \ return headers;

    }

    \;
  </cpp-chunk>

  <subsection|Scheme部分>

  <paragraph|http-ok?><typehint|((r hash-table?)) =\<gtr\> boolean?>

  接受HTTP响应作为输入，返回该HTTP响应是否OK，一般来说，HTTP状态码小于400就是OK状态。

  <\goldfish-chunk|http/liii/http.scm|true|true>
    (define (http-ok? r)

    \ \ (let ((status-code (r 'status-code))

    \ \ \ \ \ \ \ \ (reason (r 'reason))

    \ \ \ \ \ \ \ \ (url (r 'url)))

    \ \ \ \ (cond ((and (\<gtr\>= status-code 400) (\<less\> status-code 500))

    \ \ \ \ \ \ \ \ \ \ \ (error 'http-error

    \ \ \ \ \ \ \ \ \ \ \ \ \ (string-append (number-\<gtr\>string status-code)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ " Client Error: " reason " for url: " url)))

    \ \ \ \ \ \ \ \ \ \ ((and (\<gtr\>= status-code 500) (\<less\> status-code 600))

    \ \ \ \ \ \ \ \ \ \ \ (error 'http-error

    \ \ \ \ \ \ \ \ \ \ \ \ \ (string-append (number-\<gtr\>string status-code)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ " Server Error: " reason " for url: " url)))

    \ \ \ \ \ \ \ \ \ \ (else #t))))

    \;
  </goldfish-chunk>

  <subsection|C++和Scheme的混合>

  <subsubsection|http-head>

  <paragraph|C++实现>

  <\cpp-chunk|http/src/http.cpp|true|true>
    static s7_pointer

    f_http_head (s7_scheme* sc, s7_pointer args) {

    \ \ const char* url= s7_string (s7_car (args));

    \ \ cpr::Session session;

    \ \ session.SetUrl (cpr::Url (url));

    \ \ cpr::Response r= session.Head ();

    \ \ return response2hashtable (sc, r);

    }

    \;
  </cpp-chunk>

  <\cpp-chunk|http/src/http.cpp|true|true>
    inline void

    glue_http_head (s7_scheme* sc) {

    \ \ s7_pointer cur_env= s7_curlet (sc);

    \ \ const char* s_http_head = "g_http-head";

    \ \ const char* d_http_head = "(g_http-head url ...) =\<gtr\> hash-table?";

    \ \ auto func_http_head= s7_make_typed_function (sc, s_http_head, f_http_head, 1, 0, false, d_http_head, NULL);

    \ \ s7_define (sc, cur_env, s7_make_symbol (sc, s_http_head), func_http_head);

    }

    \;
  </cpp-chunk>

  <paragraph|Scheme实现>

  <\goldfish-chunk|http/liii/http.scm|true|true>
    (define* (http-head url)

    \ \ (let1 r (g_http-head url)

    \ \ \ \ \ \ \ \ r))

    \;
  </goldfish-chunk>

  <paragraph|测试：HEAD的基础功能>

  <\goldfish-chunk|http/tests/http_test.scm|true|true>
    (let1 r (http-head "https://httpbin.org")

    \ \ (check (r 'status-code) =\<gtr\> 200)

    \ \ (check (r 'url) =\<gtr\> "https://httpbin.org/")

    \ \ (check-true (real? (r 'elapsed)))

    \ \ (check (r 'reason) =\<gtr\> "")

    \ \ (check (r 'text) =\<gtr\> "")

    \ \ (check ((r 'headers) "content-type") =\<gtr\> "text/html; charset=utf-8")

    \ \ (check ((r 'headers) "content-length") =\<gtr\> "9593")

    \ \ (check-true (http-ok? r)))

    \;
  </goldfish-chunk>

  <\session|python|default>
    <\output>
      Python 3.11.2 [/usr/bin/python3]

      Python plugin for TeXmacs.

      Please see the documentation in Help -\<gtr\> Plugins -\<gtr\> Python
    </output>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      import requests
    </input>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      r= requests.head("https://httpbin.org")
    </input>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.status_code
    <|unfolded-io>
      200
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.url
    <|unfolded-io>
      https://httpbin.org/
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.ok
    <|unfolded-io>
      True
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.elapsed
    <|unfolded-io>
      0:00:01.308550
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.headers
    <|unfolded-io>
      {'Date': 'Thu, 26 Dec 2024 05:07:04 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '9593', 'Connection': 'keep-alive', 'Server': 'gunicorn/19.9.0', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true'}
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.headers["Content-Length"]
    <|unfolded-io>
      9593
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.reason
    <|unfolded-io>
      OK
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.content
    <|unfolded-io>
      b''
    </unfolded-io>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      \;
    </input>
  </session>

  <subsubsection|http-get>

  <paragraph|C++实现>

  <\cpp-chunk|http/src/http.cpp|true|true>
    static s7_pointer

    f_http_get (s7_scheme* sc, s7_pointer args) {

    \ \ const char* url= s7_string (s7_car (args));

    \ \ s7_pointer params= s7_cadr (args);

    \ \ cpr::Parameters cpr_params= to_cpr_parameters(sc, params);

    \;

    \ \ cpr::Session session;

    \ \ session.SetUrl (cpr::Url (url));

    \ \ session.SetParameters (cpr_params);

    \;

    \ \ cpr::Response r= session.Get ();

    \ \ return response2hashtable (sc, r);

    }

    \;
  </cpp-chunk>

  <\cpp-chunk|http/src/http.cpp|true|true>
    inline void

    glue_http_get (s7_scheme* sc) {

    \ \ s7_pointer cur_env= s7_curlet (sc);

    \ \ const char* s_http_get= "g_http-get";

    \ \ const char* d_http_get= "(g_http-get url params) =\<gtr\> hash-table?";

    \ \ auto func_http_get= s7_make_typed_function (sc, s_http_get, f_http_get, 2, 0, false, d_http_get, NULL);

    \ \ s7_define (sc, cur_env, s7_make_symbol (sc, s_http_get), func_http_get);

    }

    \;
  </cpp-chunk>

  <paragraph|Scheme实现>

  <\goldfish-chunk|http/liii/http.scm|true|true>
    (define* (http-get url (params '()))

    \ \ (when (not (alist? params))

    \ \ \ \ (type-error params "is not a association list"))

    \ \ (let1 r (g_http-get url params)

    \ \ \ \ \ \ \ \ r))

    \;
  </goldfish-chunk>

  <paragraph|不带参数的GET请求>

  <\goldfish-chunk|http/tests/http_test.scm|true|true>
    (let1 r (http-get "https://httpbin.org")

    \ \ (check (r 'status-code) =\<gtr\> 200)

    \ \ (check-true (\<gtr\> (string-length (r 'text)) 0))

    \ \ (check ((r 'headers) "content-type") =\<gtr\> "text/html; charset=utf-8"))

    \;
  </goldfish-chunk>

  <paragraph|带参数的GET请求>

  <\goldfish-chunk|http/tests/http_test.scm|true|true>
    (let1 r (http-get "https://httpbin.org/get"

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :params '(("key1" . "value1") ("key2" . "value2")))

    \ \ \ \ \ \ (check-true (string-contains (r 'text) "value1"))

    \ \ \ \ \ \ (check-true (string-contains (r 'text) "value2"))

    \ \ \ \ \ \ (check (r 'url) =\<gtr\> "https://httpbin.org/get?key1=value1&key2=value2"))

    \;
  </goldfish-chunk>

  <subsubsection|http-post>

  <paragraph|C++实现>

  <\cpp-chunk|http/src/http.cpp|true|true>
    static s7_pointer

    f_http_post (s7_scheme* sc, s7_pointer args) {

    \ \ const char* url= s7_string (s7_car (args));

    \ \ s7_pointer params= s7_cadr (args);

    \ \ cpr::Parameters cpr_params= to_cpr_parameters(sc, params);

    \ \ const char* body= s7_string (s7_caddr (args));

    \ \ cpr::Body cpr_body= cpr::Body (body);

    \ \ s7_pointer headers= s7_cadddr (args);

    \ \ cpr::Header cpr_headers= to_cpr_headers (sc, headers);

    \;

    \ \ cpr::Session session;

    \ \ session.SetUrl (cpr::Url (url));

    \ \ session.SetParameters (cpr_params);

    \ \ session.SetBody (cpr_body);

    \ \ session.SetHeader (cpr_headers);

    \;

    \ \ cpr::Response r= session.Post ();

    \ \ return response2hashtable (sc, r);

    }

    \;
  </cpp-chunk>

  <\cpp-chunk|http/src/http.cpp|true|true>
    inline void

    glue_http_post (s7_scheme* sc) {

    \ \ s7_pointer cur_env= s7_curlet (sc);

    \ \ const char* name= "g_http-post";

    \ \ const char* doc= "(g_http-post url params body) =\<gtr\> hash-table?";

    \ \ auto func_http_post= s7_make_typed_function (sc, name, f_http_post, 4, 0, false, doc, NULL);

    \ \ s7_define (sc, cur_env, s7_make_symbol (sc, name), func_http_post);

    }

    \;
  </cpp-chunk>

  <paragraph|Scheme实现>

  如果不设置HTTP请求头，默认的<shell|Content-Type>是<shell|application/x-www-form-urlencoded>。

  <\goldfish-chunk|http/liii/http.scm|true|true>
    (define* (http-post url (params '()) (data "") (headers '()))

    \ \ (cond ((and (string? data) (\<gtr\> (string-length data) 0) (null? headers))

    \ \ \ \ \ \ \ \ \ (g_http-post url params data '(("Content-Type" . "text/plain"))))

    \ \ \ \ \ \ \ \ (else (g_http-post url params data headers))))

    \;
  </goldfish-chunk>

  \;

  <paragraph|带参数的POST请求>

  <\goldfish-chunk|http/tests/http_test.scm|true|true>
    (let1 r (http-post "https://httpbin.org/post"

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :params '(("key1" . "value1") ("key2" . "value2")))

    \ \ \ \ \ \ (check-true (string-contains (r 'text) "value1"))

    \ \ \ \ \ \ (check-true (string-contains (r 'text) "value2"))

    \ \ \ \ \ \ (check (r 'status-code) =\<gtr\> 200)

    \ \ \ \ \ \ (check (r 'url) =\<gtr\> "https://httpbin.org/post?key1=value1&key2=value2"))

    \;
  </goldfish-chunk>

  <\session|python|default>
    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      import requests

      params = {'key1': 'value1', 'key2': 'value2'}

      response = requests.post('https://httpbin.org/post', params=params)

      print(response.status_code)

      print(response.url)
    <|unfolded-io>
      200

      https://httpbin.org/post?key1=value1&key2=value2
    </unfolded-io>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      \;
    </input>
  </session>

  <paragraph|测试：带数据的POST请求>

  <\goldfish-chunk|http/tests/http_test.scm|true|true>
    (let* ((r (http-post "https://httpbin.org/post"

    \ \ \ \ \ \ \ \ \ \ \ \ :data "This is raw data"))

    \ \ \ \ \ \ \ (json (string-\<gtr\>json (r 'text))))

    \ \ (check (r 'status-code) =\<gtr\> 200)

    \ \ (check (json-ref json "data") =\<gtr\> "This is raw data"))

    \;
  </goldfish-chunk>

  <\session|python|default>
    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      import requests

      raw_data = 'This is raw data'

      response = requests.post('https://httpbin.org/post', data=raw_data)

      response.status_code
    <|unfolded-io>
      200
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      response.headers
    <|unfolded-io>
      {'Date': 'Thu, 26 Dec 2024 05:34:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '422', 'Connection': 'keep-alive', 'Server': 'gunicorn/19.9.0', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true'}
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      response.text
    <|unfolded-io>
      {

      \ \ "args": {},\ 

      \ \ "data": "This is raw data",\ 

      \ \ "files": {},\ 

      \ \ "form": {},\ 

      \ \ "headers": {

      \ \ \ \ "Accept": "*/*",\ 

      \ \ \ \ "Accept-Encoding": "gzip, deflate, br",\ 

      \ \ \ \ "Content-Length": "16",\ 

      \ \ \ \ "Host": "httpbin.org",\ 

      \ \ \ \ "User-Agent": "python-requests/2.28.1",\ 

      \ \ \ \ "X-Amzn-Trace-Id": "Root=1-676ceade-23e96e5e6c4daa9a11303fd4"

      \ \ },\ 

      \ \ "json": null,\ 

      \ \ "origin": "117.148.121.181",\ 

      \ \ "url": "https://httpbin.org/post"

      }
    </unfolded-io>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      \;
    </input>
  </session>

  <subsubsection|glue_http>

  <\cpp-chunk|http/src/http.cpp|true|true>
    inline void

    glue_http (s7_scheme* sc) {

    \ \ glue_http_head (sc);

    \ \ glue_http_get (sc);

    \ \ glue_http_post (sc);

    }

    \;
  </cpp-chunk>

  <subsubsection|main>

  <\cpp-chunk|http/src/http.cpp|true|false>
    int

    main (int argc, char** argv) {

    #ifdef TB_CONFIG_OS_WINDOWS

    \ \ SetConsoleOutputCP (65001);

    #endif

    \ \ string \ \ \ \ \ gf_lib_dir \ = find_goldfish_library ();

    \ \ const char* gf_lib \ \ \ \ \ = gf_lib_dir.c_str ();

    \ \ s7_scheme* sc= init_goldfish_scheme (gf_lib);

    \ \ glue_http (sc);

    \ \ return repl_for_community_edition (sc, argc, argv);

    }

    \;
  </cpp-chunk>

  <section|结尾>

  <\goldfish-chunk|http/tests/http_test.scm|true|false>
    (check-report)

    \;
  </goldfish-chunk>

  <\scm-chunk|http/liii/http.scm|true|false>
    ) ; end of begin

    ) ; end of define-library

    \;
  </scm-chunk>
</body>

<\initial>
  <\collection>
    <associate|font-base-size|12>
    <associate|page-height|auto>
    <associate|page-orientation|landscape>
    <associate|page-screen-margin|false>
    <associate|page-type|a4>
    <associate|page-width|auto>
    <associate|save-aux|false>
  </collection>
</initial>
