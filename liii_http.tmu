<TMU|<tuple|1.0.5|1.2.9.8>>

<style|<tuple|generic|chinese|goldfish|literate|reduced-margins|python>>

<\body>
  <\hide-preamble>
    <assign|r7rs|<flag|R7RS|dark cyan>>

    <assign|srfi|<flag|SRFI|dark red>>

    <assign|font|math=Latin Modern Math,cjk=Noto CJK SC,CMU>

    <assign|typehint|<macro|body|<goldfish-lang|<arg|body>>>>
  </hide-preamble>

  <chapter|(liii http)>

  <section|许可证>

  <\goldfish-chunk|http/liii/http.scm|false|true>
    ;

    ; Copyright (C) 2024 The Goldfish Scheme Authors

    ;

    ; Licensed under the Apache License, Version 2.0 (the "License");

    ; you may not use this file except in compliance with the License.

    ; You may obtain a copy of the License at

    ;

    ; http://www.apache.org/licenses/LICENSE-2.0

    ;

    ; Unless required by applicable law or agreed to in writing, software

    ; distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

    ; WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

    ; License for the specific language governing permissions and limitations

    ; under the License.

    ;

    \;
  </goldfish-chunk>

  <\cpp-chunk|http/src/http.cpp|false|true>
    //

    // Copyright (C) 2024 The Goldfish Scheme Authors

    //

    // Licensed under the Apache License, Version 2.0 (the "License");

    // you may not use this file except in compliance with the License.

    // You may obtain a copy of the License at

    //

    // http://www.apache.org/licenses/LICENSE-2.0

    //

    // Unless required by applicable law or agreed to in writing, software

    // distributed under the License is distributed on an "AS IS" BASIS, WITHOUT

    // WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the

    // License for the specific language governing permissions and limitations

    // under the License.

    //

    \;
  </cpp-chunk>

  <section|接口>

  <\scm-chunk|http/liii/http.scm|true|true>
    (define-library (liii http)

    (import (liii hash-table)

    \ \ \ \ \ \ \ \ (liii alist))

    (export http-head http-get http-post http-ok?)

    (begin

    \;
  </scm-chunk>

  <paragraph|HTTP响应对象>

  <\description>
    <item*|status_code>HTTP状态码

    <item*|url>最终有效的请求URL

    <item*|elapsed>请求的总时间，以秒为单位

    <item*|text>HTTP响应的正文

    <item*|reason>HTTP响应出错的原因

    <item*|headers>HTTP响应头
  </description>

  <section|Python相关代码示例>

  <paragraph|HEAD和GET>

  <\session|python|default>
    <\output>
      Python 3.11.2 [/usr/bin/python3]

      Python plugin for TeXmacs.

      Please see the documentation in Help -\<gtr\> Plugins -\<gtr\> Python
    </output>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      import requests
    </input>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      r= requests.head("https://httpbin.org")
    </input>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.status_code
    <|unfolded-io>
      200
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.url
    <|unfolded-io>
      https://httpbin.org/
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.url
    <|unfolded-io>
      https://httpbin.org/
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.ok
    <|unfolded-io>
      True
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.elapsed
    <|unfolded-io>
      0:00:01.221606
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.headers
    <|unfolded-io>
      {'Date': 'Wed, 25 Dec 2024 07:28:12 GMT', 'Content-Type': 'text/html; charset=utf-8', 'Content-Length': '9593', 'Connection': 'keep-alive', 'Server': 'gunicorn/19.9.0', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true'}
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.headers["Content-Length"]
    <|unfolded-io>
      9593
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.reason
    <|unfolded-io>
      OK
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.content
    <|unfolded-io>
      b''
    </unfolded-io>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      r= requests.get("https://httpbin.org")
    </input>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.status_code
    <|unfolded-io>
      200
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      r.r
    <|unfolded-io>
      Moved Temporarily
    </unfolded-io>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      \;
    </input>
  </session>

  <paragraph|POST发送表单数据>

  <\session|python|default>
    <\output>
      Python 3.11.2 [/usr/bin/python3]

      Python plugin for TeXmacs.

      Please see the documentation in Help -\<gtr\> Plugins -\<gtr\> Python
    </output>

    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      import requests

      \;

      # 表单数据

      data = {

      \ \ \ \ 'key1': 'value1',

      \ \ \ \ 'key2': 'value2'

      }

      \;

      # 发送 POST 请求

      response = requests.post('https://httpbin.org/post', data=data)

      \;

      # 打印响应

      print(response.status_code)

      print(response.text)
    <|unfolded-io>
      200

      {

      \ \ "args": {},\ 

      \ \ "data": "",\ 

      \ \ "files": {},\ 

      \ \ "form": {

      \ \ \ \ "key1": "value1",\ 

      \ \ \ \ "key2": "value2"

      \ \ },\ 

      \ \ "headers": {

      \ \ \ \ "Accept": "*/*",\ 

      \ \ \ \ "Accept-Encoding": "gzip, deflate, br",\ 

      \ \ \ \ "Content-Length": "23",\ 

      \ \ \ \ "Content-Type": "application/x-www-form-urlencoded",\ 

      \ \ \ \ "Host": "httpbin.org",\ 

      \ \ \ \ "User-Agent": "python-requests/2.28.1",\ 

      \ \ \ \ "X-Amzn-Trace-Id": "Root=1-676cc1d2-4ee7523b5d6601e16a2cb68d"

      \ \ },\ 

      \ \ "json": null,\ 

      \ \ "origin": "117.148.121.181",\ 

      \ \ "url": "https://httpbin.org/post"

      }

      \;
    </unfolded-io>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      \;
    </input>
  </session>

  <paragraph|POST发送原始数据>

  <\session|python|default>
    <\unfolded-io>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|unfolded-io>
      import requests

      \;

      # 原始字符串数据

      raw_data = 'This is raw data'

      \;

      # 发送 POST 请求

      response = requests.post('https://httpbin.org/post', data=raw_data)

      \;

      # 打印响应

      print(response.status_code)

      print(response.text)
    <|unfolded-io>
      200

      {

      \ \ "args": {},\ 

      \ \ "data": "This is raw data",\ 

      \ \ "files": {},\ 

      \ \ "form": {},\ 

      \ \ "headers": {

      \ \ \ \ "Accept": "*/*",\ 

      \ \ \ \ "Accept-Encoding": "gzip, deflate, br",\ 

      \ \ \ \ "Content-Length": "16",\ 

      \ \ \ \ "Host": "httpbin.org",\ 

      \ \ \ \ "User-Agent": "python-requests/2.28.1",\ 

      \ \ \ \ "X-Amzn-Trace-Id": "Root=1-676cc7b8-1466a6d757e3cd38526b7310"

      \ \ },\ 

      \ \ "json": null,\ 

      \ \ "origin": "117.148.121.181",\ 

      \ \ "url": "https://httpbin.org/post"

      }

      \;
    </unfolded-io>

    <\input>
      \<gtr\>\<gtr\>\<gtr\>\ 
    <|input>
      \;
    </input>
  </session>

  \;

  <section|Goldfish Scheme中的response设计>

  <\session|goldfish|default>
    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (import (liii hash-table))
    <|unfolded-io>
      <goldfish-result|(rootlet)>
    </unfolded-io>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (define r (make-hash-table))
    <|unfolded-io>
      <goldfish-result|(hash-table)>
    </unfolded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      (hash-table-set! r 'ok #t)
    </input>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (r 'ok)
    <|unfolded-io>
      <goldfish-result|#t>
    </unfolded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      (hash-table-set! r 'status-code 200)
    </input>

    <\unfolded-io>
      \<gtr\>\ 
    <|unfolded-io>
      (r 'status-code)
    <|unfolded-io>
      <goldfish-result|200>
    </unfolded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      (hash-table-set! r 'headers (make-hash-table))
    </input>

    <\input>
      \<gtr\>\ 
    <|input>
      (hash-table-set! (r 'headers) "Content-Length" "9593")
    </input>

    <\folded-io>
      \<gtr\>\ 
    <|folded-io>
      ((r 'headers) "Content-Length")
    <|folded-io>
      <goldfish-result|"9593">
    </folded-io>

    <\input>
      \<gtr\>\ 
    <|input>
      \;
    </input>
  </session>

  <section|测试>

  如何测试：

  <\shell-code>
    xmake config --http=y --yes -vD

    bin/http http/tests/http_test.scm
  </shell-code>

  <\goldfish-chunk|http/tests/http_test.scm|false|true>
    (set! *load-path* (cons "http" *load-path*))

    \;

    (import (liii check)

    \ \ \ \ \ \ \ \ (liii http)

    \ \ \ \ \ \ \ \ (liii string))

    \;
  </goldfish-chunk>

  \;

  <section|实现>

  <subsection|C++部分>

  <paragraph|头文件>

  <\cpp-chunk|http/src/http.cpp|true|true>
    #include "goldfish.hpp"

    #include "s7.h"

    #include \<less\>string\<gtr\>

    #include \<less\>iostream\<gtr\>

    #include \<less\>cpr/cpr.h\<gtr\>

    \;

    using namespace goldfish;

    using namespace std;

    \;
  </cpp-chunk>

  <paragraph|repsonse2hashtable>

  <\cpp-chunk|http/src/http.cpp|true|true>
    static s7_pointer

    response2hashtable (s7_scheme* sc, cpr::Response r) {

    \ \ s7_pointer ht= s7_make_hash_table (sc, 8);

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol (sc, "status-code"), s7_make_integer (sc, r.status_code));

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol (sc, "url"), s7_make_string (sc, r.url.c_str()));

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol(sc, "elapsed"), s7_make_real (sc, r.elapsed));

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol (sc, "text"), s7_make_string (sc, r.text.c_str ()));

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol (sc, "reason"), s7_make_string (sc, r.reason.c_str ()));

    \ \ s7_pointer headers= s7_make_hash_table(sc, 8);

    \ \ for (const auto &header : r.header) {

    \ \ \ \ s7_hash_table_set (sc, headers, s7_make_string (sc, header.first.c_str ()), s7_make_string (sc, header.second.c_str ())) ;

    \ \ }

    \ \ s7_hash_table_set (sc, ht, s7_make_symbol(sc, "headers"), headers);

    \;

    \ \ return ht;

    }

    \;
  </cpp-chunk>

  <\cpp-chunk|http/src/http.cpp|true|true>
    static cpr::Parameters

    to_cpr_paramters (s7_scheme* sc, s7_pointer args) {

    \ \ cpr::Parameters params= cpr::Parameters{};

    \ \ if (s7_is_list(sc, args)) {

    \ \ \ \ s7_pointer iter= args;

    \ \ \ \ while (!s7_is_null (sc, iter)) {

    \ \ \ \ \ \ s7_pointer pair= s7_car (iter);

    \ \ \ \ \ \ if (s7_is_pair (pair)) {

    \ \ \ \ \ \ \ \ const char* key= s7_string (s7_car (pair));

    \ \ \ \ \ \ \ \ const char* value= s7_string (s7_cdr (pair));

    \ \ \ \ \ \ \ \ params.Add (cpr::Parameter (string (key), string (value)));

    \ \ \ \ \ \ }

    \ \ \ \ \ \ iter= s7_cdr (iter);

    \ \ \ \ }

    \ \ }

    \ \ return params;

    }

    \;
  </cpp-chunk>

  <subsection|Scheme部分>

  <paragraph|http-ok?><typehint|((r hash-table?)) =\<gtr\> boolean?>

  接受HTTP响应作为输入，返回该HTTP响应是否OK，一般来说，HTTP状态码小于400就是OK状态。

  <\goldfish-chunk|http/liii/http.scm|true|true>
    (define (http-ok? r)

    \ \ (let ((status-code (r 'status-code))

    \ \ \ \ \ \ \ \ (reason (r 'reason))

    \ \ \ \ \ \ \ \ (url (r 'url)))

    \ \ \ \ (cond ((and (\<gtr\>= status-code 400) (\<less\> status-code 500))

    \ \ \ \ \ \ \ \ \ \ \ (error 'http-error

    \ \ \ \ \ \ \ \ \ \ \ \ \ (string-append (integer-\<gtr\>string status-code)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ " Client Error: " reason " for url: " url)))

    \ \ \ \ \ \ \ \ \ \ ((and (\<gtr\>= status-code 500) (\<less\> status-code 600))

    \ \ \ \ \ \ \ \ \ \ \ (error 'http-error

    \ \ \ \ \ \ \ \ \ \ \ \ \ (string-append (integer-\<gtr\>string status-code)

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ " Server Error: " reason " for url: " url)))

    \ \ \ \ \ \ \ \ \ \ (else #t))))

    \;
  </goldfish-chunk>

  <subsection|C++和Scheme的混合>

  <paragraph|http-head>

  <\goldfish-chunk|http/liii/http.scm|true|true>
    (define* (http-head url)

    \ \ (let1 r (g_http-head url)

    \ \ \ \ \ \ \ \ r))

    \;
  </goldfish-chunk>

  <\cpp-chunk|http/src/http.cpp|true|true>
    static s7_pointer

    f_http_head (s7_scheme* sc, s7_pointer args) {

    \ \ const char* url= s7_string (s7_car (args));

    \ \ cpr::Session session;

    \ \ session.SetUrl (cpr::Url (url));

    \ \ cpr::Response r= session.Head ();

    \ \ return response2hashtable (sc, r);

    }

    \;
  </cpp-chunk>

  <\goldfish-chunk|http/tests/http_test.scm|true|true>
    (let1 r (http-head "https://httpbin.org")

    \ \ (check (r 'status-code) =\<gtr\> 200)

    \ \ (check (r 'url) =\<gtr\> "https://httpbin.org/")

    \ \ (check-true (real? (r 'elapsed)))

    \ \ (check (r 'reason) =\<gtr\> "")

    \ \ (check (r 'text) =\<gtr\> "")

    \ \ (check ((r 'headers) "content-type") =\<gtr\> "text/html; charset=utf-8")

    \ \ (check ((r 'headers) "content-length") =\<gtr\> "9593")

    \ \ (check-true (http-ok? r)))

    \;
  </goldfish-chunk>

  <paragraph|http-get>

  <\goldfish-chunk|http/liii/http.scm|true|true>
    (define* (http-get url (params '()))

    \ \ (when (not (alist? params))

    \ \ \ \ (type-error params "is not a association list"))

    \ \ (let1 r (g_http-get url params)

    \ \ \ \ \ \ \ \ r))

    \;
  </goldfish-chunk>

  <\cpp-chunk|http/src/http.cpp|true|true>
    static s7_pointer

    f_http_get (s7_scheme* sc, s7_pointer args) {

    \ \ const char* url= s7_string (s7_car (args));

    \ \ s7_pointer params= s7_cadr (args);

    \ \ cpr::Parameters cpr_params= to_cpr_paramters(sc, params);

    \;

    \ \ cpr::Session session;

    \ \ session.SetUrl (cpr::Url (url));

    \ \ session.SetParameters (cpr_params);

    \;

    \ \ cpr::Response r= session.Get ();

    \ \ return response2hashtable (sc, r);

    }

    \;
  </cpp-chunk>

  <subparagraph|不带参数的GET请求>

  <\goldfish-chunk|http/tests/http_test.scm|true|true>
    (let1 r (http-get "https://httpbin.org")

    \ \ (check (r 'status-code) =\<gtr\> 200)

    \ \ (check-true (\<gtr\> (string-length (r 'text)) 0))

    \ \ (check ((r 'headers) "content-type") =\<gtr\> "text/html; charset=utf-8"))

    \;
  </goldfish-chunk>

  <subparagraph|带参数的GET请求>

  <\goldfish-chunk|http/tests/http_test.scm|true|true>
    (let1 r (http-get "https://httpbin.org/get"

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :params '(("key1" . "value1") ("key2" . "value2")))

    \ \ \ \ \ \ (check-true (string-contains (r 'text) "value1"))

    \ \ \ \ \ \ (check-true (string-contains (r 'text) "value2"))

    \ \ \ \ \ \ (check (r 'url) =\<gtr\> "https://httpbin.org/get?key1=value1&key2=value2"))

    \;
  </goldfish-chunk>

  <paragraph|http-post>

  <\goldfish-chunk|http/liii/http.scm|true|true>
    (define* (http-post url (data '()))

    \ \ (cond ((alist? data) (g_http-post url data))

    \ \ \ \ \ \ \ \ (else (???))))

    \;
  </goldfish-chunk>

  <\cpp-chunk|http/src/http.cpp|true|true>
    static s7_pointer

    f_http_post (s7_scheme* sc, s7_pointer args) {

    \ \ const char* url= s7_string (s7_car (args));

    \ \ s7_pointer params= s7_cadr (args);

    \ \ cpr::Parameters cpr_params= to_cpr_paramters(sc, params);

    \;

    \ \ cpr::Session session;

    \ \ session.SetUrl (cpr::Url (url));

    \ \ session.SetParameters (cpr_params);

    \;

    \ \ cpr::Response r= session.Post ();

    \ \ return response2hashtable (sc, r);

    }

    \;
  </cpp-chunk>

  <subparagraph|带参数的POST请求>

  <\goldfish-chunk|http/tests/http_test.scm|true|true>
    (let1 r (http-post "https://httpbin.org/post"

    \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :data '(("key1" . "value1") ("key2" . "value2")))

    \ \ \ \ \ \ (check-true (string-contains (r 'text) "value1"))

    \ \ \ \ \ \ (check-true (string-contains (r 'text) "value2"))

    \ \ \ \ \ \ (check (r 'url) =\<gtr\> "https://httpbin.org/post?key1=value1&key2=value2"))

    \;
  </goldfish-chunk>

  <subparagraph|带数据的POST请求>

  <paragraph|glue_http>

  <\cpp-chunk|http/src/http.cpp|true|false>
    inline void

    glue_http (s7_scheme* sc) {

    \ \ s7_pointer cur_env= s7_curlet (sc);

    \;

    \ \ const char* s_http_head = "g_http-head";

    \ \ const char* d_http_head = "(g_http-head url ...) =\<gtr\> hash-table?";

    \ \ auto func_http_head= s7_make_typed_function (

    \ \ \ \ sc, s_http_head, f_http_head, 1, 0, false, d_http_head, NULL);

    \ \ s7_define (sc, cur_env, s7_make_symbol (sc, s_http_head), func_http_head);

    \;

    \ \ const char* s_http_get= "g_http-get";

    \ \ const char* d_http_get= "(g_http-get url params) =\<gtr\> hash-table?";

    \ \ auto func_http_get= s7_make_typed_function (

    \ \ \ \ sc, s_http_get, f_http_get, 2, 0, false, d_http_get, NULL);

    \ \ s7_define (sc, cur_env, s7_make_symbol (sc, s_http_get), func_http_get);

    \;

    \ \ const char* s_http_post= "g_http-post";

    \ \ const char* d_http_post= "(g_http-get url params) =\<gtr\> hash-table?";

    \ \ auto func_http_post= s7_make_typed_function (

    \ \ \ \ sc, s_http_post, f_http_post, 2, 0, false, d_http_post, NULL);

    \ \ s7_define (sc, cur_env, s7_make_symbol (sc, s_http_post), func_http_post);

    }

    \;
  </cpp-chunk>

  <paragraph|main>

  <\cpp-chunk|http/src/http.cpp|true|false>
    int

    main (int argc, char** argv) {

    \ \ string \ \ \ \ \ gf_lib_dir \ = find_goldfish_library ();

    \ \ const char* gf_lib \ \ \ \ \ = gf_lib_dir.c_str ();

    \ \ s7_scheme* sc= init_goldfish_scheme (gf_lib);

    \ \ glue_http (sc);

    \ \ return repl_for_community_edition (sc, argc, argv);

    }

    \;
  </cpp-chunk>

  <section|结尾>

  <\goldfish-chunk|http/tests/http_test.scm|true|false>
    (check-report)

    \;
  </goldfish-chunk>

  <\scm-chunk|http/liii/http.scm|true|false>
    ) ; end of begin

    ) ; end of define-library

    \;
  </scm-chunk>
</body>

<\initial>
  <\collection>
    <associate|font-base-size|8>
    <associate|page-height|auto>
    <associate|page-orientation|landscape>
    <associate|page-screen-margin|false>
    <associate|page-type|a5>
    <associate|page-width|auto>
    <associate|save-aux|false>
  </collection>
</initial>
